knitr::opts_chunk$set(echo = TRUE)
library(data.table)
install.packages("data.table")
library("data.table", lib.loc="C:/Users/seycakir/Anaconda3/envs/rstudio/lib/R/library")
library("dbplyr", lib.loc="C:/Users/seycakir/Anaconda3/envs/rstudio/lib/R/library")
detach("package:data.table", unload=TRUE)
detach("package:dbplyr", unload=TRUE)
install.packages("TSrepr")
install.packages("ggplot2")
install.packages(""gg3D"")
intstall.packages("gg3D")
install.packages("gg3D")
install.packages("rgl")
install.packages("rgl")
install.packages("rgl")
install.packages("rgl")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(TSrepr)
library(ggplot2)
library(rgl)
library(data.table)
library(TSrepr)
library(ggplot2)
library("rgl"")
library(data.table)
library(TSrepr)
library(ggplot2)
library("rgl")
z_train <- fread("uWaveGestureLibrary_Z_TRAIN")
getwd()== 'C:\Users\seycakir\Documents\GitHub\fall21-seymacakir\hw1'
getwd()== 'C:\\Users\\seycakir\\Documents\\GitHub\\fall21-seymacakir\\hw1'
x_train <- fread("uWaveGestureLibrary_X_TRAIN")
getwd('C:\\Users\\seycakir\\Documents\\GitHub\\fall21-seymacakir\\hw1')
setwd('C:\\Users\\seycakir\\Documents\\GitHub\\fall21-seymacakir\\hw1')
x_train <- fread("uWaveGestureLibrary_X_TRAIN")
y_train <- fread("uWaveGestureLibrary_Y_TRAIN")
z_train <- fread("uWaveGestureLibrary_Z_TRAIN")
head(x_train)
head(x_train)
x_train['V1'] <- factor(x_train['V1'])
head(x_train)
x_train['V1',] <- factor(x_train['V1',])
head(x_train)
x_train.V1<- factor(x_train.V1)
head(x_train)
x_train.V1<- as.factor(x_train.V1)
head(x_train)
x_train.V1
class(x_train)
str(x_train)
x_train$V1 <- as.factor(x_train$V1)
y_train$V1 <- as.factor(y_train$V1)
z_train$V1 <- as.factor(z_train$V1)
x_train$V1 <- as.factor(x_train$V1)
setnames(x_train, 'V1', 'class')
y_train$V1 <- as.factor(y_train$V1)
setnames(y_train, 'V1', 'class')
z_train$V1 <- as.factor(z_train$V1)
setnames(z_train, 'V1', 'class')
x_train$V1 <- as.factor(x_train$V1)
setnames(x_train, 'V1', 'class')
x_train[, id:=as.factor(1:.N)]
y_train$V1 <- as.factor(y_train$V1)
setnames(y_train, 'V1', 'class')
y_train[, id:=as.factor(1:.N)]
z_train$V1 <- as.factor(z_train$V1)
setnames(z_train, 'V1', 'class')
z_train[, id:=as.factor(1:.N)]
str(x_train)
x_train$V1 <- as.factor(x_train$V1)
setnames(x_train, 'V1', 'class')
x_train[, id:=as.factor(1:.N)]
y_train$V1 <- as.factor(y_train$V1)
setnames(y_train, 'V1', 'class')
y_train[, id:=as.factor(1:.N)]
z_train$V1 <- as.factor(z_train$V1)
setnames(z_train, 'V1', 'class')
z_train[, id:=as.factor(1:.N)]
str(x_train$id)
data_x <- melt(x_train, id.vars = "id", measure.vars = "class")
data_x <- melt(x_train, id.vars = "id", measure.vars = "class")
head(data_x)
data_x <- melt(x_train, id.vars = c("id", "class"))
head(data_x)
sep(data_x, variable, time)
data_x <- melt(x_train, id.vars = c("id", "class"))
head(data_x)
sep(data_x, variable, time, sep= "V")
install.packages("tidyr")
library(tidyr)
sep(data_x, variable, time, sep= "V")
seperate(data_x, variable, time, sep= "V")
separate(data_x, variable, time, sep= "V")
separate(data_x, variable, time)
data_x <- melt(x_train, id.vars = c("id", "class"))
head(data_x)
separate(data_x, variable, into = c("V", "time"))
data_x <- melt(x_train, id.vars = c("id", "class"))
head(data_x)
separate(data_x, variable, into = c("V", "time"), sep = "V")
as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1
data_x <- melt(x_train, id.vars = c("id", "class"))
data_y <- melt(y_train, id.vars = c("id", "class"))
data_z <- melt(z_train, id.vars = c("id", "class"))
data_x["time"] <- as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1
as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time)
data_x["time"] <- str(as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time)) - 1
data_x <- melt(x_train, id.vars = c("id", "class"))
data_y <- melt(y_train, id.vars = c("id", "class"))
data_z <- melt(z_train, id.vars = c("id", "class"))
data_x["time"] <- as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1
as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1
x<- as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1
str(x)
x[is.na(x)]
data_x[,time := (as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1)]
library(data.table)
library(TSrepr)
library(ggplot2)
library(tidyr)
setwd('C:\\Users\\seycakir\\Documents\\GitHub\\fall21-seymacakir\\hw1')
x_train <- fread("uWaveGestureLibrary_X_TRAIN")
y_train <- fread("uWaveGestureLibrary_Y_TRAIN")
z_train <- fread("uWaveGestureLibrary_Z_TRAIN")
x_train$V1 <- as.factor(x_train$V1)
setnames(x_train, 'V1', 'class')
x_train[, id:=as.factor(1:.N)]
y_train$V1 <- as.factor(y_train$V1)
setnames(y_train, 'V1', 'class')
y_train[, id:=as.factor(1:.N)]
z_train$V1 <- as.factor(z_train$V1)
setnames(z_train, 'V1', 'class')
z_train[, id:=as.factor(1:.N)]
data_x <- melt(x_train, id.vars = c("id", "class"))
data_y <- melt(y_train, id.vars = c("id", "class"))
data_z <- melt(z_train, id.vars = c("id", "class"))
data_x[,time := (as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1)]
# data_y["time"] <- as.numeric(separate(data_y, variable, into = c("V", "time"), sep = "V")$time) - 1
# data_z["time"] <- as.numeric(separate(data_z, variable, into = c("V", "time"), sep = "V")$time) - 1
data_x <- melt(x_train, id.vars = c("id", "class"))
data_y <- melt(y_train, id.vars = c("id", "class"))
data_z <- melt(z_train, id.vars = c("id", "class"))
data_x[,time := (as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1)]
str(data_x)
# data_y["time"] <- as.numeric(separate(data_y, variable, into = c("V", "time"), sep = "V")$time) - 1
# data_z["time"] <- as.numeric(separate(data_z, variable, into = c("V", "time"), sep = "V")$time) - 1
head(x)
head(data_x)
data_x[, id ==1]
data_x[,data_x[, id ==1]]
data_x[data_x[, id ==1]]
data_x[data_x[, id ==18]]
data_x[data_x[, id ==896]]
data_x[,time := (as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1)]
data_y[, time: = (as.numeric(separate(data_y, variable, into = c("V", "time"), sep = "V")$time) - 1)]
data_x <- melt(x_train, id.vars = c("id", "class"))
data_y <- melt(y_train, id.vars = c("id", "class"))
data_z <- melt(z_train, id.vars = c("id", "class"))
data_x[,time := (as.numeric(separate(data_x, variable, into = c("V", "time"), sep = "V")$time) - 1)]
data_y[, time := (as.numeric(separate(data_y, variable, into = c("V", "time"), sep = "V")$time) - 1)]
data_z[,time := ( as.numeric(separate(data_z, variable, into = c("V", "time"), sep = "V")$time) - 1)]
ggplot( aes(x = data_x[id== '1']$value, y = data_y[id == '1']$value)) +geom_point()
ggplot( data_x, aes(x = data_x[id== '1']$value, y = data_y[id == '1']$value)) +geom_point()
ggplot( data_x, aes(x = data_x[id== '1']$value) ) +geom_point()
ggplot( data_x[id== '1'], aes(x = value) ) +geom_point()
ggplot( data_x[id== '1'], aes(x = value) ) +geom_point(aes( y = data_y[id== '1']$value))
ggplot( data_x[id== '1'], aes(x = value) ) +geom_point(aes( y = data_y[id== '1']$value))
ggplot( data_x[id== '1'], aes(x = value) ) +geom_point(aes( z = data_y[id== '1']$value))
ggplot( data_x[id== '1'], aes(x = value) ) +geom_point(aes( y = data_y[id== '1']$value))
ggplot( data_x[id== '1'], aes(x = value) ) +geom_point(aes( y = data_z[id== '1']$value))
ggplot( data_y[id== '1'], aes(y = value) ) +geom_point(aes( y = data_z[id== '1']$value))
ggplot( data_x[id== '1'], aes(x = value) ) +geom_point(aes( y = data_y[id== '1']$value))
ggplot( data_x[id== '1'], aes(x = value) ) +geom_point(aes( y = data_z[id== '1']$value))
ggplot( data_y[id== '1'], aes(x = value) ) +geom_point(aes( y = data_z[id== '1']$value))
ggplot( data_x, aes(x = value), fill = id ) +geom_point(aes( y = data_y$value), fill= id )
ggplot( data_x, aes(x = value, fill = id )) +geom_point(aes( y = data_y$value))
ggplot( data_x, aes(x = value ), color = class) +geom_point(aes( y = data_y$value))
ggplot( data_x, aes(x = value, color = class )) +geom_point(aes( y = data_y$value))
install.packages("plotly")
install.packages("plotly")
if(!require(installr)) {
install.packages("installr");
require(installr)
q()
