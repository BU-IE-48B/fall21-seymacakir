Trace_Results <- get_acc(Trace_raw_data$distpath,5,10,c(1,3,5),Trace_raw_data$trainclass)
show_results(Trace_Results,"Trace")
Trace_Results <- get_acc(Trace_raw_data$distpath,5,10,c(1,3,5),Trace_raw_data$trainclass)
TRACE <- show_results(Trace_Results,"Trace")
TRACE[[2]]
knitr::opts_chunk$set(include = TRUE, echo = TRUE, warning = FALSE, message = FALSE)
# Libraries imported.
library(data.table)
library(ggplot2)
library(tidyr)
require(dplyr)
require(rpart)
require(caret)
library(tidyverse)
require(TSrepr)
require(TSdist)
require(dtw)
require(TunePareto)
library(zoo)
#The environment set as HW3 folder to get dataset eaisly and write files easily.
setwd('D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3')
#To avoid randomness in evey run of code, the set.seed function used.
set.seed(488)
##############################################
raw_data_preperation <- function(data){
# data readed
train_data <-  as.data.table( read.table(sprintf("%s\\%s_TRAIN.txt",data,data)))
test_data <- as.data.table( read.table(sprintf("%s\\%s_TEST.txt",data,data)))
# change V1 column since it represents classes
setnames(train_data,'V1','class')
setnames(test_data,'V1','class')
train_data$class = as.factor(train_data$class)
# assign ID for each time series.
train_data[,id:=1:.N]
print(head(train_data))
#first column is the class variable
trainclass=train_data$class
testclass=test_data$class
dist_path = sprintf("%s/%s/distances", getwd(),data)
data <- list(traindata = train_data[,2:(ncol(train_data)-1)], # Take only observation values
testdata = test_data[,2:(ncol(test_data)-1)],
trainclass = trainclass,
testclass =testclass,
distpath = dist_path,
raw_data = train_data)
return(data)
}
###########################################################
# function for show the structure of time series classifications.
g1 <- function(data,dataset){
long_train=melt(data,id.vars=c('id','class'))
long_train[,time:=as.numeric(gsub("\\D", "", variable))-1]
long_train=long_train[,list(id,class,time,value)]
ggplot(long_train, aes(time,value)) + geom_line(aes(color=as.character(id))) +
labs(
title = sprintf(" %s Time Series by Classes", dataset)
) +
theme_classic() +  theme(legend.position = "none") +
facet_wrap(~class)
}
############################################################
# Piecewise linear approximation
# based on *Zhu Y, Wu D, Li Sh (2007) A Piecewise Linear Representation Method of Time Series
# Based on Feature Points. Knowledge-Based Intelligent Information and Engineering Systems 4693:1066-1072*
pla_rep_data <- function(dataset,n_important,raw_data){
# Data involves id and class variables
train_data <- raw_data
# Data involves only time series observations
traindata <- train_data[,2:(ncol(train_data)-1)]
trainclass <- train_data$class
# melt the data for long format
long_train=melt(train_data,id.vars=c('id','class'))
# using gsub to set the nonnumerical part to zero length
long_train[,time:=as.numeric(gsub("\\D", "", variable))-1]
# remove variable
long_train=long_train[,list(id,class,time,value)]
long_train=long_train[order(id,time)]
for (i in 1:nrow(train_data)){
# select series to represent
data=long_train[id==i]
data_ts <- data$value
# set parameter and represent as PLA
pla_rep=repr_pla(data_ts, times = n_important, return = "both")
# fill the blanks between points and add time
setnames(pla_rep,c('places','points'),c('time','pla_rep'))
pla_rep$time=pla_rep$time+1
data=merge(data,pla_rep,by='time',all.x=T)
data[, pla_rep := na.approx(pla_rep)]
# change real observations with representation values
traindata[i] <- as.data.table(t(data$pla_rep))
}
data <- list(traindata = traindata)
return(data)
}
#########################################################################
# Regression trees recuresively partitions the predictor space to obtain piecewise constant models
rpart_rep_data <- function(dataset,maxdepth, raw_data){
# Data involves id and class variables
train_data <- raw_data
# Data involves only time series observations to change with representations
traindata <- train_data[,2:(ncol(train_data)-1)]
trainclass <- train_data$class
# melt the data for long format
long_train=melt(train_data,id.vars=c('id','class'))
# using gsub to set the nonnumerical part to zero length
long_train[,time:=as.numeric(gsub("\\D", "", variable))-1]
# remove variable
long_train=long_train[,list(id,class,time,value)]
long_train=long_train[order(id,time)]
for (i in 1:nrow(traindata)){
# select the data for representation
data=long_train[id==i]
# set parameters and represent data
tree_fit=rpart(value~time,data,control=rpart.control(maxdepth=maxdepth))
data[,tree_rep:=predict(tree_fit,data)]
# change actual variables with representation
traindata[i] <- as.data.table(t(data$tree_rep))
}
data <- list(traindata = traindata)
return(data)
}
########################################################################
# Create a function calculates distances and record them with data set name, representation model info, and distance approach
# This function calculte distances and record them as csv files to read when the distances matirx used so in the code they are run one times and commented to avoid calculaton every time code runs to calculate again.
#the comment sign "#" should deleted.
get_distances = function(traindata,dist_path,dataset,rep) {
# calculate distances and store them to save time
large_number=100000000000000000000
# Euclidean Distance
dist_euc=as.matrix(dist(traindata))
diag(dist_euc)=large_number
fwrite(dist_euc,sprintf('%s/%s_euc_%s.csv',dist_path,dataset,rep),col.names=F)
# DTW method
dist_dtw=as.matrix(dtwDist(traindata))
diag(dist_dtw)=large_number
fwrite(dist_dtw,sprintf('%s/%s_dtw_%s.csv',dist_path,dataset,rep),col.names=F)
# LCSS method
dist_lcss=TSDatabaseDistances(traindata,distance='lcss',epsilon=0.05)
dist_lcss=as.matrix(dist_lcss)
diag(dist_lcss)=large_number
fwrite(dist_lcss,sprintf('%s/%s_lcss_%s.csv',dist_path,dataset,rep),col.names=F)
# ERP merhod
dist_erp=TSDatabaseDistances(traindata,distance='erp',g=0.5)
dist_erp=as.matrix(dist_erp)
diag(dist_erp)=large_number
fwrite(dist_erp,sprintf('%s/%s_erp_%s.csv',dist_path,dataset,rep),col.names=F)
}
#######################################################################################
# classification used k-nn approach
nn_classify_cv=function(dist_matrix,train_class,test_indices,k=1){
test_distances_to_train=dist_matrix[test_indices,]
test_distances_to_train=test_distances_to_train[,-test_indices]
train_class=train_class[-test_indices]
ordered_indices=apply(test_distances_to_train,1,order)
if(k==1){
nearest_class=as.numeric(train_class[as.numeric(ordered_indices[1,])])
nearest_class=data.table(id=test_indices,nearest_class)
} else {
nearest_class=apply(ordered_indices[1:k,],2,function(x) {train_class[x]})
nearest_class=data.table(id=test_indices,t(nearest_class))
}
long_nn_class=melt(nearest_class,'id')
class_counts=long_nn_class[,.N,list(id,value)]
class_counts[,predicted_prob:=N/k]
wide_class_prob_predictions=dcast(class_counts,id~value,value.var='predicted_prob')
wide_class_prob_predictions[is.na(wide_class_prob_predictions)]=0
class_predictions=class_counts[,list(predicted=value[which.max(N)]),by=list(id)]
return(list(prediction=class_predictions,prob_estimates=wide_class_prob_predictions))
}
###################################################################################
# Calculation of accuarcy by using cross-validation technique
get_acc = function(dist_path,nof_rep = 5,n_fold = 10, k_levels, trainclass){
dist_files=list.files(dist_path, full.names=T)
cv_indices=generateCVRuns(trainclass, ntimes =nof_rep, nfold = n_fold,
leaveOneOut = FALSE, stratified = TRUE)
approach_file=list.files(dist_path)
result=vector('list',length(dist_files)*nof_rep*n_fold*length(k_levels))
iter=1
for(m in 1:length(dist_files)){
dist_mat=as.matrix(fread(dist_files[m],header=FALSE))
for(i in 1:nof_rep){
this_fold=cv_indices[[i]]
for(j in 1:n_fold){
test_indices=this_fold[[j]]
for(k in 1:length(k_levels)){
current_k=k_levels[k]
current_fold=nn_classify_cv(dist_mat,trainclass,test_indices,k=current_k)
accuracy=sum(trainclass[test_indices]==current_fold$prediction$predicted)/length(test_indices)
tmp=data.table(dataset = strsplit(approach_file[m],"_")[[1]][1],
rep = strsplit(approach_file[m],"_")[[1]][3],
approach= strsplit(approach_file[m],"_")[[1]][2],
repid=i,
foldid=j,
k=current_k,
acc=accuracy)
result[[iter]]=tmp
iter=iter+1
}
}
}
}
return (list(result))
}
######################################################
# representation of accuracy values
show_results <- function( get_acc, Dataset){
results =rbindlist(get_acc[[1]])
overall_results <- results[,list(avg_acc=mean(acc),sdev_acc=sd(acc),result_count=.N),by=list(dataset,rep,approach,k)]
# The results shown by box plot
g <- ggplot(results,aes(x=paste0(approach,'-', rep,"-",k), y=acc)) +
geom_boxplot() + labs(
title = sprintf(" Accuracies of %s Dataset", Dataset),
x = "Methods",
y = "Accuracy") + theme_minimal() +  coord_flip()
print(g)
max <- overall_results[avg_acc == max(overall_results$avg_acc)]
results <- as.data.table(overall_results[order(avg_acc)])
return(list(max, results))
}
### TRACE DATA SET ###
# the data pre-proceed
Trace_raw_data <- raw_data_preperation("Trace")
# distances of raw data time series are  calculated
#get_distances(Trace_raw_data$traindata,Trace_raw_data$distpath, "Trace","raw")
g1(Trace_raw_data$raw_data, "Trace")
# Data representation and preparation
Trace_pla_rep_3 <- pla_rep_data("Trace",3 ,Trace_raw_data$raw_data)
# Distance Calculated
#get_distances(Trace_pla_rep_3$traindata,Trace_raw_data$distpath,"Trace","PLApoints3")
# Data representation and preparation
Trace_pla_rep_5 <- pla_rep_data("Trace", 5,Trace_raw_data$raw_data)
# Distance Calculated
#get_distances(Trace_pla_rep_5$traindata, Trace_raw_data$distpath,"Trace","PLApoints5")
# Data representation and preparation
Trace_rpart_3 <- rpart_rep_data("Trace", 3 ,Trace_raw_data$raw_data)
# Distance calculated
#get_distances(Trace_rpart_3$traindata,Trace_raw_data$distpath,"Trace","Rpartmaxdepth3")
# Data representation and preparation
Trace_rpart_5 <- rpart_rep_data("Trace", 5, Trace_raw_data$raw_data)
# Distance Calculated
#get_distances(Trace_rpart_5$traindata,Trace_raw_data$distpath,"Trace","Rpartmaxdepth5")
Trace_Results <- get_acc(Trace_raw_data$distpath,5,10,c(1,3,5),Trace_raw_data$trainclass)
TRACE <- show_results(Trace_Results,"Trace")
TRACE[[2]]
# The data readed and merge to predict test data by train data without use test.
Trace_train_data <- as.data.table( read.table("Trace\\Trace_TRAIN.txt"))
dim(Trace_train_data)
Trace_test_data <- as.data.table( read.table("Trace\\Trace_TEST.txt"))
dim(Trace_test_data)
Trace_data <- rbind(Trace_train_data,Trace_test_data)
dim(Trace_data)
Trace_data[,id := 1:.N]
Trace_matrix <- Trace_data[, 2:(ncol(Trace_data)-1)]
Trace_class <- as.factor(Trace_data$V1)
#distance matrix calculted with dtw method.
#dist_dtw=as.matrix(dtwDist(Trace_matrix))
#diag(dist_dtw)= 2*max(dist_dtw)
#fwrite(dist_dtw,'Trace/TEST.csv',col.names=F)
dist_matrix <-as.matrix(fread("D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3\\Trace\\TEST.csv",header=FALSE))
# predictions basen on 1-nn classifier
Trace_TEST_prediction <- as.factor(nn_classify_cv(dist_matrix,Trace_class,test_indices = c(101:200), k=1)$prediction$predicted)
# the confusion matrix of predictions shown.
confusionMatrix(data = Trace_TEST_prediction, reference = Trace_class[101:200])
### ECG200 DATA SET ###
# the data pre-proceed
ECG200_raw_data <- raw_data_preperation("ECG200")
# distances calculated
#get_distances(ECG200_raw_data$traindata,ECG200_raw_data$distpath, "ECG200","raw")
g1(ECG200_raw_data$raw_data[c(1:5,95:100),], "ECG200")
# Data representation and preparation
ECG200_pla_rep_5 <- pla_rep_data("ECG200",5 ,ECG200_raw_data$raw_data)
# Distance Calculated
#get_distances(ECG200_pla_rep_5$traindata,ECG200_raw_data$distpath,"ECG200","PLApoints5")
# Data representation and preparation
ECG200_pla_rep_10 <- pla_rep_data("ECG200", 10,ECG200_raw_data$raw_data)
# Distance Calculated
#get_distances(ECG200_pla_rep_10$traindata, ECG200_raw_data$distpath,"ECG200","PLApoints10")
# Data representation and preparation
ECG200_rpart_5 <- rpart_rep_data("ECG200", 5 ,ECG200_raw_data$raw_data)
# Distance calculated
#get_distances(ECG200_rpart_5$traindata,ECG200_raw_data$distpath,"ECG200","Rpartmaxdepth5")
# Data representation and preparation
ECG200_rpart_10 <- rpart_rep_data("ECG200", 10, ECG200_raw_data$raw_data)
# Distance Calculated
#get_distances(ECG200_rpart_10$traindata,ECG200_raw_data$distpath,"ECG200","Rpartmaxdepth10")
ECG200_Results <- get_acc(ECG200_raw_data$distpath,5,10,c(1,3,5),ECG200_raw_data$trainclass)
ECG200 <- show_results(ECG200_Results,"ECG200")
ECG200[[2]]
# data readed and merge to use train data as predictor of TEST data
ECG_train_data <- as.data.table( read.table("ECG200\\ECG200_TRAIN.txt"))
dim(ECG_train_data)
ECG_test_data <- as.data.table( read.table("ECG200\\ECG200_TEST.txt"))
dim(ECG_test_data)
ECG_data <- rbind(ECG_train_data,ECG_test_data)
ECG_data[,id := 1:.N]
dim(ECG_data)
ECG_matrix <- ECG_data[, 2:(ncol(ECG_data)-1)]
ECG_class <- as.factor(ECG_data$V1)
# Euclidiean diatnce calculated.
#dist_mat=as.matrix(dist(ECG_matrix))
#diag(dist_mat)=  2*max(dist_mat)
#fwrite(dist_mat,'ECG200/distances/TEST.csv',col.names=F)
dist_matrix <-as.matrix(fread("D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3\\ECG200\\TEST.csv",header=FALSE))
# predictions with 3-nn classifier.
ECG_TEST_prediction <- as.factor(nn_classify_cv(dist_matrix,ECG_class,test_indices = c(101:200), k=3)$prediction$predicted)
# Confusion Matrix shown
confusionMatrix(data = ECG_TEST_prediction, reference = ECG_class[101:200])
### Plane DATA SET ###
# the data pre-proceed
Plane_raw_data <- raw_data_preperation("Plane")
# distances calculated
#get_distances(Plane_raw_data$traindata,Plane_raw_data$distpath, "Plane","raw")
g1(Plane_raw_data$raw_data, "Plane")
# Data representation and preparation
Plane_pla_rep_5 <- pla_rep_data("Plane",5 ,Plane_raw_data$raw_data)
# Distance Calculated
#(Plane_pla_rep_5$traindata,Plane_raw_data$distpath,"Plane","PLApoints5")
# Data representation and preparation
Plane_pla_rep_10 <- pla_rep_data("Plane", 10,Plane_raw_data$raw_data)
# Distance Calculated
#get_distances(Plane_pla_rep_10$traindata, Plane_raw_data$distpath,"Plane","PLApoints10")
# Data representation and preparation
Plane_rpart_5 <- rpart_rep_data("Plane", 5 ,Plane_raw_data$raw_data)
# Distance calculated
#get_distances(Plane_rpart_5$traindata,Plane_raw_data$distpath,"Plane","Rpartmaxdepth5")
# Data representation and preparation
Plane_rpart_10 <- rpart_rep_data("Plane", 10, Plane_raw_data$raw_data)
# Distance Calculated
#get_distances(Plane_rpart_10$traindata,Plane_raw_data$distpath,"Plane","Rpartmaxdepth10")
Plane_Results <- get_acc(Plane_raw_data$distpath,5,10,c(1,3,5),Plane_raw_data$trainclass)
PLANE <- show_results(Plane_Results,"Plane")
PLANE[[2]]
# data readed and merge to use train data as predictor of TEST data
PLANE_train_data <- as.data.table( read.table("Plane\\Plane_TRAIN.txt"))
dim(PLANE_train_data)
PLANE_test_data <- as.data.table( read.table("PLANE\\Plane_TEST.txt"))
dim(PLANE_test_data)
PLANE_data <- rbind(PLANE_train_data,PLANE_test_data)
PLANE_data[,id := 1:.N]
dim(PLANE_data)
PLANE_matrix <- PLANE_data[, 2:(ncol(PLANE_data)-1)]
PLANE_class <- as.factor(PLANE_data$V1)
# distances calcultes with erp method
#dist_mat=as.matrix(TSDatabaseDistances(PLANE_matrix,distance='erp',g=0.5))
#diag(dist_mat)=  2*max(dist_mat)
#fwrite(dist_mat,'PLANE/TEST.csv',col.names=F)
dist_matrix <-as.matrix(fread("D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3\\Plane\\TEST.csv",header=FALSE))
# Predcitions made with 3-nn classifier
PLANE_TEST_prediction <- as.factor(nn_classify_cv(dist_matrix,PLANE_class,test_indices = c(106:210), k=3)$prediction$predicted)
# confusion matrix
confusionMatrix(data = PLANE_TEST_prediction, reference = PLANE_class[106:210])
### SmoothSubspace DATA SET ###
# the data pre-proceed
SmoothSubspace_raw_data <- raw_data_preperation("SmoothSubspace")
# distances calculated
#get_distances(SmoothSubspace_raw_data$traindata,SmoothSubspace_raw_data$distpath, "SmoothSubspace","raw")
g1(SmoothSubspace_raw_data$raw_data, "SmoothSubspace")
# Data representation and preparation
SmoothSubspace_pla_rep_5 <- pla_rep_data("SmoothSubspace",5 ,SmoothSubspace_raw_data$raw_data)
# Distance Calculated
#get_distances(SmoothSubspace_pla_rep_5$traindata,SmoothSubspace_raw_data$distpath,"SmoothSubspace","PLApoints5")
# Data representation and preparation
SmoothSubspace_pla_rep_10 <- pla_rep_data("SmoothSubspace", 10,SmoothSubspace_raw_data$raw_data)
# Distance Calculated
#get_distances(SmoothSubspace_pla_rep_10$traindata, SmoothSubspace_raw_data$distpath,"SmoothSubspace","PLApoints10")
# Data representation and preparation
SmoothSubspace_rpart_5 <- rpart_rep_data("SmoothSubspace", 5 ,SmoothSubspace_raw_data$raw_data)
# Distance calculated
#get_distances(SmoothSubspace_rpart_5$traindata,SmoothSubspace_raw_data$distpath,"SmoothSubspace","Rpartmaxdepth5")
# Data representation and preparation
SmoothSubspace_rpart_10 <- rpart_rep_data("SmoothSubspace", 10, SmoothSubspace_raw_data$raw_data)
# Distance Calculated
#get_distances(SmoothSubspace_rpart_10$traindata,SmoothSubspace_raw_data$distpath,"SmoothSubspace","Rpartmaxdepth10")
SmoothSubspace_Results <- get_acc(SmoothSubspace_raw_data$distpath,5,10,c(1,3,5),SmoothSubspace_raw_data$trainclass)
SMOOTHSUBSPACE <- show_results(SmoothSubspace_Results,"SmoothSubspace")
SMOOTHSUBSPACE[[1]]
# data readed and merge to use train data as predictor of TEST data
SmoothSubspace_train_data <- as.data.table( read.table("SmoothSubspace\\SmoothSubspace_TRAIN.txt"))
dim(SmoothSubspace_train_data)
SmoothSubspace_test_data <- as.data.table( read.table("SmoothSubspace\\SmoothSubspace_TEST.txt"))
dim(SmoothSubspace_test_data)
SmoothSubspace_data <- rbind(SmoothSubspace_train_data,SmoothSubspace_test_data)
SmoothSubspace_data[,id := 1:.N]
dim(SmoothSubspace_data)
SmoothSubspace_matrix <- SmoothSubspace_data[, 2:(ncol(SmoothSubspace_data)-1)]
SmoothSubspace_class <- as.factor(SmoothSubspace_data$V1)
# the distance calculations basen on erp
#dist_mat=as.matrix(TSDatabaseDistances(SmoothSubspace_matrix,distance='erp',g=0.5))
#diag(dist_mat)=  2*max(dist_mat)
#fwrite(dist_mat,'SmoothSubspace/TEST.csv',col.names=F)
dist_matrix <-as.matrix(fread("D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3\\SmoothSubspace\\TEST.csv",header=FALSE))
#the predictions based on 5-nn classifier
SmoothSubspace_TEST_prediction <- as.factor(nn_classify_cv(dist_matrix,SmoothSubspace_class,test_indices = c(151:300), k=5)$prediction$predicted)
# Confusion Matrix shown
confusionMatrix(data = SmoothSubspace_TEST_prediction, reference = SmoothSubspace_class[151:300])
### PowerCons DATA SET ###
# the data pre-proceed
PowerCons_raw_data <- raw_data_preperation("PowerCons")
# distances calculated
#get_distances(PowerCons_raw_data$traindata,PowerCons_raw_data$distpath, "PowerCons","raw")
g1(PowerCons_raw_data$raw_data[c(1:5,175:180)], "PowerCons")
# Data representation and preparation
PowerCons_pla_rep_5 <- pla_rep_data("PowerCons",5 ,PowerCons_raw_data$raw_data)
# Distance Calculated
#get_distances(PowerCons_pla_rep_5$traindata,PowerCons_raw_data$distpath,"PowerCons","PLApoints5")
# Data representation and preparation
PowerCons_pla_rep_10 <- pla_rep_data("PowerCons", 10,PowerCons_raw_data$raw_data)
# Distance Calculated
#get_distances(PowerCons_pla_rep_10$traindata, PowerCons_raw_data$distpath,"PowerCons","PLApoints10")
# Data representation and preparation
PowerCons_rpart_5 <- rpart_rep_data("PowerCons", 5 ,PowerCons_raw_data$raw_data)
# Distance calculated
#get_distances(PowerCons_rpart_5$traindata,PowerCons_raw_data$distpath,"PowerCons","Rpartmaxdepth5")
# Data representation and preparation
PowerCons_rpart_10 <- rpart_rep_data("PowerCons", 10, PowerCons_raw_data$raw_data)
# Distance Calculated
#get_distances(PowerCons_rpart_10$traindata,PowerCons_raw_data$distpath,"PowerCons","Rpartmaxdepth10")
PowerCons_Results <- get_acc(PowerCons_raw_data$distpath,5,10,c(1,3,5),PowerCons_raw_data$trainclass)
POWERCONS <- show_results(PowerCons_Results,"PowerCons")
POWERCONS[[2]]
# data readed and merge to use train data as predictor of TEST data
PowerCons_train_data <- as.data.table( read.table("PowerCons\\PowerCons_TRAIN.txt"))
dim(PowerCons_train_data)
PowerCons_test_data <- as.data.table( read.table("PowerCons\\PowerCons_TEST.txt"))
dim(PowerCons_test_data)
PowerCons_data <- rbind(PowerCons_train_data,PowerCons_test_data)
PowerCons_data[,id := 1:.N]
dim(PowerCons_data)
PowerCons_matrix <- PowerCons_data[, 2:(ncol(PowerCons_data)-1)]
PowerCons_class <- as.factor(PowerCons_data$V1)
# Distance calculates based on euclidiean distance
#dist_mat=as.matrix(dist(PowerCons_matrix))
#diag(dist_mat)=  2*max(dist_mat)
#fwrite(dist_mat,'PowerCons/TEST.csv',col.names=F)
dist_matrix <-as.matrix(fread("D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3\\PowerCons\\TEST.csv",header=FALSE))
# predictions based on 3-nn classifier
PowerCons_TEST_prediction <- as.factor(nn_classify_cv(dist_matrix,PowerCons_class,test_indices = c(181:360), k=3)$prediction$predicted)
# Confudion Matrix shown
confusionMatrix(data = PowerCons_TEST_prediction, reference = PowerCons_class[181:360])
RESULTS = rbind(TRACE[[1]], ECG200[[1]],PLANE[[1]],SMOOTHSUBSPACE[[1]],POWERCONS[[1]])
RESULTS
RESULTS = rbind(TRACE[[1]], ECG200[[1]],PLANE[[1]][5],SMOOTHSUBSPACE[[1]],POWERCONS[[1]])
RESULTS
RESULTS = rbind(TRACE[[1]], ECG200[[1]],PLANE[[1]][5],SMOOTHSUBSPACE[[1]],POWERCONS[[1]])[,C(1:6)]
RESULTS[,1:6]
RESULTS = rbind(TRACE[[1]], ECG200[[1]],PLANE[[1]][5],SMOOTHSUBSPACE[[1]],POWERCONS[[1]])[,1:6]
RESULTS
# data readed and merge to use train data as predictor of TEST data
PLANE_train_data <- as.data.table( read.table("Plane\\Plane_TRAIN.txt"))
dim(PLANE_train_data)
PLANE_test_data <- as.data.table( read.table("PLANE\\Plane_TEST.txt"))
dim(PLANE_test_data)
PLANE_data <- rbind(PLANE_train_data,PLANE_test_data)
PLANE_data[,id := 1:.N]
dim(PLANE_data)
PLANE_matrix <- PLANE_data[, 2:(ncol(PLANE_data)-1)]
PLANE_class <- as.factor(PLANE_data$V1)
# distances calcultes with erp method
#dist_mat=as.matrix(TSDatabaseDistances(PLANE_matrix,distance='erp',g=0.5))
#diag(dist_mat)=  2*max(dist_mat)
#fwrite(dist_mat,'PLANE/TEST.csv',col.names=F)
dist_matrix <-as.matrix(fread("D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3\\Plane\\TEST.csv",header=FALSE))
# Predcitions made with 3-nn classifier
PLANE_TEST_prediction <- as.factor(nn_classify_cv(dist_matrix,PLANE_class,test_indices = c(106:210), k=3)$prediction$predicted)
# confusion matrix
confusionMatrix(data = PLANE_TEST_prediction, reference = PLANE_class[106:210])
# data readed and merge to use train data as predictor of TEST data
PLANE_train_data <- as.data.table( read.table("Plane\\Plane_TRAIN.txt"))
dim(PLANE_train_data)
PLANE_test_data <- as.data.table( read.table("PLANE\\Plane_TEST.txt"))
dim(PLANE_test_data)
PLANE_data <- rbind(PLANE_train_data,PLANE_test_data)
PLANE_data[,id := 1:.N]
dim(PLANE_data)
PLANE_matrix <- PLANE_data[, 2:(ncol(PLANE_data)-1)]
PLANE_class <- as.factor(PLANE_data$V1)
# distances calcultes with erp method
#dist_mat=as.matrix(TSDatabaseDistances(PLANE_matrix,distance='erp',g=0.5))
#diag(dist_mat)=  2*max(dist_mat)
#fwrite(dist_mat,'PLANE/TEST.csv',col.names=F)
dist_matrix <-as.matrix(fread("D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3\\Plane\\TEST.csv",header=FALSE))
# Predcitions made with 3-nn classifier
PLANE_TEST_prediction <- as.factor(nn_classify_cv(dist_matrix,PLANE_class,test_indices = c(106:210), k=5)$prediction$predicted)
# confusion matrix
confusionMatrix(data = PLANE_TEST_prediction, reference = PLANE_class[106:210])
ECG_test_acc <- confusionMatrix(data = PLANE_TEST_prediction, reference = PLANE_class[106:210])
ECG_test_acc$overall$Accuracy
ECG_test_acc$overall$accuracy
ECG_test_acc$overall
ECG_test_acc$overall["Accuracy"]
ECG_test_acc <- confusionMatrix(data = PLANE_TEST_prediction, reference = PLANE_class[106:210])$overall["Accuracy"]
Trace_test_acc <- confusionMatrix(data = Trace_TEST_prediction, reference = Trace_class[101:200])$overall["Accuracy"]
Trace_test_acc <- confusionMatrix(data = Trace_TEST_prediction, reference = Trace_class[101:200])$overall["Accuracy"]
ECG_test_acc = confusionMatrix(data = ECG_TEST_prediction, reference = ECG_class[101:200])$overall["Accuracy"]
Plane_test_acc <- confusionMatrix(data = PLANE_TEST_prediction, reference = PLANE_class[106:210])$overall["Accuracy"]
SmoothSubspace_test_acc = SmoothSubspace_TEST_prediction, reference = SmoothSubspace_class[151:300])$overall["Accuracy"]
SmoothSubspace_test_acc = confusionMatrix(SmoothSubspace_TEST_prediction, reference = SmoothSubspace_class[151:300])$overall["Accuracy"]
PowerCons_test_acc <- confusionMatrix(data = PowerCons_TEST_prediction, reference = PowerCons_class[181:360])$overall["Accuracy"]
RESULTS[, test_acc:= c(Trace_test_acc,ECG_test_acc,Plane_test_acc,SmoothSubspace_test_acc,PowerCons_test_acc)]
RESULTS
setnames(RESULTS,"avg_acc","cv_train_acc")
RESULTS
RESULTS = rbind(TRACE[[1]], ECG200[[1]],PLANE[[1]][5],SMOOTHSUBSPACE[[1]],POWERCONS[[1]])[,1:5]
RESULTS[, test_acc:= c(Trace_test_acc,ECG_test_acc,Plane_test_acc,SmoothSubspace_test_acc,PowerCons_test_acc)]
setnames(RESULTS,"avg_acc","cv_train_acc")
RESULTS
knitr::purl(HW3.rmd)
setwd('D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3')
knitr::purl(HW3.rmd)
knitr::purl("HW3.rmd")
setwd('D:\\Users\\seyma\\Documents\\GitHub\\fall21-seymacakir\\HW3')
knitr::purl("HW3.rmd")
